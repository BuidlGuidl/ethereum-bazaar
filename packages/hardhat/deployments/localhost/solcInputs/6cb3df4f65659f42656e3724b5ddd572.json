{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/IListingType.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IListingType {\n    struct ListingTypeMetadata {\n        string name;          // e.g. \"SimpleListing\"\n        string version;       // e.g. \"1.0.0\"\n        string description;   // optional\n        string abi;           // JSON ABI encoded as a string\n    }\n\n    /// @notice Creates a new listing\n    /// @param creator The creator of the listing\n    /// @param listingId The ID of the listing\n    /// @param data The data for the listing\n    /// @dev All listings start at this step\n    function create(address creator, uint256 listingId, bytes calldata data)\n        external\n        returns (bool success);\n\n    /// @notice Handles an action for a listing\n    /// @param listingId The ID of the listing\n    /// @param creator The creator of the listing\n    /// @param active Whether the listing is active\n    /// @param caller The caller of the action\n    /// @param action The action to handle\n    /// @param data The data for the action\n    /// @dev The caller must be the marketplace contract\n    function handleAction(\n        uint256 listingId,\n        address creator,\n        bool active,\n        address caller,\n        bytes32 action,\n        bytes calldata data\n    ) external payable;\n\n    /// @notice Returns the data for a listing\n    /// @dev The data is the encoded data for the listing\n    function getListing(uint256 listingId)\n        external\n        view\n        returns (bytes memory data);\n}\n"
    },
    "contracts/Marketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport { IListingType } from \"./IListingType.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract Marketplace is ReentrancyGuard {\n    error ListingCreationFailed();\n    error OnlyListingTypeCanModify();\n    error ListingNotFound();\n\n    struct ListingPointer {\n        address creator;\n        address listingType;\n        string contenthash;\n        bool active;\n    }\n\n    uint256 public listingCount;\n    mapping(uint256 => ListingPointer) public listings;\n\n    event ListingCreated(uint256 indexed id, address indexed creator, address indexed listingType, uint256 listingId, string contenthash);\n    event ListingAction(uint256 indexed id, address indexed caller, bytes32 action);\n    event ListingActivationChanged(uint256 indexed listingId, bool active);\n\n    function createListing(\n        address listingType,\n        string calldata contenthash,\n        bytes calldata data\n    ) external nonReentrant returns (uint256 id) {\n        id = listingCount++;\n        bool success = IListingType(listingType).create(msg.sender, id, data);\n        if (!success) revert ListingCreationFailed();\n        listings[id] = ListingPointer(msg.sender, listingType, contenthash, true);\n        emit ListingCreated(id, msg.sender, listingType, id, contenthash);\n    }\n\n    function callAction(\n        uint256 id,\n        bytes32 action,\n        bytes calldata data\n    ) external payable nonReentrant {\n        if (id >= listingCount) revert ListingNotFound();\n        ListingPointer memory ptr = listings[id];\n        IListingType(ptr.listingType).handleAction{value: msg.value}(id, ptr.creator, ptr.active, msg.sender, action, data);\n        emit ListingAction(id, msg.sender, action);\n    }\n\n    function setActive(uint256 listingId, bool active) external {\n        ListingPointer storage record = listings[listingId];\n        if (msg.sender != record.listingType) revert OnlyListingTypeCanModify();\n        record.active = active;\n        emit ListingActivationChanged(listingId, active);\n    }\n\n    function getListing(uint256 id) external view returns (\n        address creator,\n        address listingType,\n        string memory contenthash,\n        bool active,\n        bytes memory listingData\n    ) {\n        ListingPointer memory ptr = listings[id];\n        creator = ptr.creator;\n        listingType = ptr.listingType;\n        contenthash = ptr.contenthash;\n        active = ptr.active;\n        listingData = IListingType(ptr.listingType).getListing(id);\n    }\n}\n"
    },
    "contracts/SimpleListings.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport { IListingType } from \"./IListingType.sol\";\nimport { Marketplace } from \"./Marketplace.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract SimpleListings is IListingType {\n    error PriceZero();\n    error NotActive();\n    error IncorrectEth();\n    error NoEthWithErc20();\n    error Erc20TransferFailed();\n    error NotCreator();\n    error NotMarketplace();\n    error MarketplaceZeroAddress();\n    error EthSendFailed();\n    error UnknownAction();\n    error NotSelf();\n\n    struct SimpleListing {\n        address paymentToken; // address(0) for ETH, ERC20 otherwise\n        uint256 price;\n    }\n\n    address public immutable marketplace;\n    mapping(uint256 => SimpleListing) public listings;\n\n    event SimpleListingCreated(\n        uint256 indexed listingId,\n        address indexed creator,\n        address paymentToken,\n        uint256 price\n    );\n    event SimpleListingSold(uint256 indexed listingId, address indexed buyer, uint256 price, address paymentToken);\n    event SimpleListingClosed(uint256 indexed listingId, address indexed caller);\n\n    constructor(address _marketplace) {\n        if (_marketplace == address(0)) revert MarketplaceZeroAddress();\n        marketplace = _marketplace;\n    }\n\n    modifier onlyMarketplace() {\n        if (msg.sender != marketplace) revert NotMarketplace();\n        _;\n    }\n\n    modifier onlySelf() {\n        if (msg.sender != address(this)) revert NotSelf();\n        _;\n    }\n\n    modifier isActive(bool active) {\n        if (!active) revert NotActive();\n        _;\n    }\n\n    // View helpers\n    function getListing(uint256 listingId) external view returns (bytes memory data) {\n        SimpleListing memory l = listings[listingId];\n        return abi.encode(l.paymentToken, l.price);\n    }\n\n    // IListingType: create a new listing bound to the marketplace-provided id\n    function create(address creator, uint256 listingId, bytes calldata data) external onlyMarketplace returns (bool success) {\n        (address paymentToken, uint256 price) = abi.decode(data, (address, uint256));\n        if (price == 0) revert PriceZero();\n        listings[listingId] = SimpleListing({\n            paymentToken: paymentToken,\n            price: price\n        });\n        emit SimpleListingCreated(listingId, creator, paymentToken, price);\n        return true;\n    }\n\n    // Exposed entrypoints for dynamic dispatch; guarded so they can only be invoked via handleAction\n    function buy(\n        uint256 listingId,\n        address creator,\n        bool active,\n        address buyer,\n        bytes calldata /*data*/\n    ) external payable onlySelf isActive(active) {\n        SimpleListing storage l = listings[listingId];\n        Marketplace(marketplace).setActive(listingId, false);\n        if (l.paymentToken == address(0)) {\n            if (msg.value != l.price) revert IncorrectEth();\n            (bool sent, ) = creator.call{ value: msg.value }(\"\");\n            if (!sent) revert EthSendFailed();\n        } else {\n            if (msg.value != 0) revert NoEthWithErc20();\n            bool ok = IERC20(l.paymentToken).transferFrom(buyer, creator, l.price);\n            if (!ok) revert Erc20TransferFailed();\n        }\n        emit SimpleListingSold(listingId, buyer, l.price, l.paymentToken);\n    }\n\n    function close(\n        uint256 listingId,\n        address creator,\n        bool active,\n        address caller,\n        bytes calldata /*data*/\n    ) external onlySelf isActive(active) {\n        if (creator != caller) revert NotCreator();\n        Marketplace(marketplace).setActive(listingId, false);\n        emit SimpleListingClosed(listingId, caller);\n    }\n\n    function handleAction(\n        uint256 listingId,\n        address creator,\n        bool active,\n        address caller,\n        bytes32 action,\n        bytes calldata data\n    ) external payable onlyMarketplace {\n        // dynamic dispatch to self with the provided selector; functions are protected by onlySelf\n        bytes4 selector = bytes4(action);\n        (bool ok, bytes memory reason) = address(this).call{ value: msg.value }(\n            abi.encodeWithSelector(selector, listingId, creator, active, caller, data)\n        );\n        if (!ok) {\n            if (reason.length > 0) {\n                assembly {\n                    revert(add(reason, 0x20), mload(reason))\n                }\n            }\n            revert UnknownAction();\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}