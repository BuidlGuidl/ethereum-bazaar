{
  "address": "0x0fe4e093e587c33036c9e203CF6328B61844812d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketplace",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Erc20TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EthSendFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketplaceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoEthWithErc20",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCreator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMarketplace",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownAction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SimpleListingClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SimpleListingCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "SimpleListingSold",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "action",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "handleAction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplace",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2216ff52e56af57d4223b96d462e356100e69f91b2a8b7ee80b6b6dd549bca76",
  "receipt": {
    "to": null,
    "from": "0xc0ecFcAad1e434cB959B48D97347B1e288d0372a",
    "contractAddress": "0x0fe4e093e587c33036c9e203CF6328B61844812d",
    "transactionIndex": 182,
    "gasUsed": "690092",
    "logsBloom": "0x
    "blockHash": "0x3b441370c7b5aad671249e512c9eba3779799e47111c60715be571f5d3f0451e",
    "transactionHash": "0x2216ff52e56af57d4223b96d462e356100e69f91b2a8b7ee80b6b6dd549bca76",
    "logs": [],
    "blockNumber": 36962392,
    "cumulativeGasUsed": "32262698",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf1B9CB7D0256a02E997586361D05829e7801D74B"
  ],
  "numDeployments": 2,
  "solcInputHash": "6cb3df4f65659f42656e3724b5ddd572",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Erc20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthSendFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketplaceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoEthWithErc20\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMarketplace\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownAction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SimpleListingClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SimpleListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"SimpleListingSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"handleAction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(address,uint256,bytes)\":{\"details\":\"All listings start at this step\",\"params\":{\"creator\":\"The creator of the listing\",\"data\":\"The data for the listing\",\"listingId\":\"The ID of the listing\"}},\"getListing(uint256)\":{\"details\":\"The data is the encoded data for the listing\"},\"handleAction(uint256,address,bool,address,bytes32,bytes)\":{\"details\":\"The caller must be the marketplace contract\",\"params\":{\"action\":\"The action to handle\",\"active\":\"Whether the listing is active\",\"caller\":\"The caller of the action\",\"creator\":\"The creator of the listing\",\"data\":\"The data for the action\",\"listingId\":\"The ID of the listing\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"create(address,uint256,bytes)\":{\"notice\":\"Creates a new listing\"},\"getListing(uint256)\":{\"notice\":\"Returns the data for a listing\"},\"handleAction(uint256,address,bool,address,bytes32,bytes)\":{\"notice\":\"Handles an action for a listing\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleListings.sol\":\"SimpleListings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/IListingType.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IListingType {\\n    struct ListingTypeMetadata {\\n        string name;          // e.g. \\\"SimpleListing\\\"\\n        string version;       // e.g. \\\"1.0.0\\\"\\n        string description;   // optional\\n        string abi;           // JSON ABI encoded as a string\\n    }\\n\\n    /// @notice Creates a new listing\\n    /// @param creator The creator of the listing\\n    /// @param listingId The ID of the listing\\n    /// @param data The data for the listing\\n    /// @dev All listings start at this step\\n    function create(address creator, uint256 listingId, bytes calldata data)\\n        external\\n        returns (bool success);\\n\\n    /// @notice Handles an action for a listing\\n    /// @param listingId The ID of the listing\\n    /// @param creator The creator of the listing\\n    /// @param active Whether the listing is active\\n    /// @param caller The caller of the action\\n    /// @param action The action to handle\\n    /// @param data The data for the action\\n    /// @dev The caller must be the marketplace contract\\n    function handleAction(\\n        uint256 listingId,\\n        address creator,\\n        bool active,\\n        address caller,\\n        bytes32 action,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /// @notice Returns the data for a listing\\n    /// @dev The data is the encoded data for the listing\\n    function getListing(uint256 listingId)\\n        external\\n        view\\n        returns (bytes memory data);\\n}\\n\",\"keccak256\":\"0x3a0b496630c1d806853dd70ed59cf031926794bafe6a566bffe15a87ddb43d6e\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { IListingType } from \\\"./IListingType.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract Marketplace is ReentrancyGuard {\\n    error ListingCreationFailed();\\n    error OnlyListingTypeCanModify();\\n    error ListingNotFound();\\n\\n    struct ListingPointer {\\n        address creator;\\n        address listingType;\\n        string contenthash;\\n        bool active;\\n    }\\n\\n    uint256 public listingCount;\\n    mapping(uint256 => ListingPointer) public listings;\\n\\n    event ListingCreated(uint256 indexed id, address indexed creator, address indexed listingType, uint256 listingId, string contenthash);\\n    event ListingAction(uint256 indexed id, address indexed caller, bytes32 action);\\n    event ListingActivationChanged(uint256 indexed listingId, bool active);\\n\\n    function createListing(\\n        address listingType,\\n        string calldata contenthash,\\n        bytes calldata data\\n    ) external nonReentrant returns (uint256 id) {\\n        id = listingCount++;\\n        bool success = IListingType(listingType).create(msg.sender, id, data);\\n        if (!success) revert ListingCreationFailed();\\n        listings[id] = ListingPointer(msg.sender, listingType, contenthash, true);\\n        emit ListingCreated(id, msg.sender, listingType, id, contenthash);\\n    }\\n\\n    function callAction(\\n        uint256 id,\\n        bytes32 action,\\n        bytes calldata data\\n    ) external payable nonReentrant {\\n        if (id >= listingCount) revert ListingNotFound();\\n        ListingPointer memory ptr = listings[id];\\n        IListingType(ptr.listingType).handleAction{value: msg.value}(id, ptr.creator, ptr.active, msg.sender, action, data);\\n        emit ListingAction(id, msg.sender, action);\\n    }\\n\\n    function setActive(uint256 listingId, bool active) external {\\n        ListingPointer storage record = listings[listingId];\\n        if (msg.sender != record.listingType) revert OnlyListingTypeCanModify();\\n        record.active = active;\\n        emit ListingActivationChanged(listingId, active);\\n    }\\n\\n    function getListing(uint256 id) external view returns (\\n        address creator,\\n        address listingType,\\n        string memory contenthash,\\n        bool active,\\n        bytes memory listingData\\n    ) {\\n        ListingPointer memory ptr = listings[id];\\n        creator = ptr.creator;\\n        listingType = ptr.listingType;\\n        contenthash = ptr.contenthash;\\n        active = ptr.active;\\n        listingData = IListingType(ptr.listingType).getListing(id);\\n    }\\n}\\n\",\"keccak256\":\"0x9a90f7f4b7e35c80caf60e89770dfda91079235fa94ae6100b6a6e9b72682064\",\"license\":\"MIT\"},\"contracts/SimpleListings.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { IListingType } from \\\"./IListingType.sol\\\";\\nimport { Marketplace } from \\\"./Marketplace.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract SimpleListings is IListingType {\\n    error PriceZero();\\n    error NotActive();\\n    error IncorrectEth();\\n    error NoEthWithErc20();\\n    error Erc20TransferFailed();\\n    error NotCreator();\\n    error NotMarketplace();\\n    error MarketplaceZeroAddress();\\n    error EthSendFailed();\\n    error UnknownAction();\\n    error NotSelf();\\n\\n    struct SimpleListing {\\n        address paymentToken; // address(0) for ETH, ERC20 otherwise\\n        uint256 price;\\n    }\\n\\n    address public immutable marketplace;\\n    mapping(uint256 => SimpleListing) public listings;\\n\\n    event SimpleListingCreated(\\n        uint256 indexed listingId,\\n        address indexed creator,\\n        address paymentToken,\\n        uint256 price\\n    );\\n    event SimpleListingSold(uint256 indexed listingId, address indexed buyer, uint256 price, address paymentToken);\\n    event SimpleListingClosed(uint256 indexed listingId, address indexed caller);\\n\\n    constructor(address _marketplace) {\\n        if (_marketplace == address(0)) revert MarketplaceZeroAddress();\\n        marketplace = _marketplace;\\n    }\\n\\n    modifier onlyMarketplace() {\\n        if (msg.sender != marketplace) revert NotMarketplace();\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) revert NotSelf();\\n        _;\\n    }\\n\\n    modifier isActive(bool active) {\\n        if (!active) revert NotActive();\\n        _;\\n    }\\n\\n    // View helpers\\n    function getListing(uint256 listingId) external view returns (bytes memory data) {\\n        SimpleListing memory l = listings[listingId];\\n        return abi.encode(l.paymentToken, l.price);\\n    }\\n\\n    // IListingType: create a new listing bound to the marketplace-provided id\\n    function create(address creator, uint256 listingId, bytes calldata data) external onlyMarketplace returns (bool success) {\\n        (address paymentToken, uint256 price) = abi.decode(data, (address, uint256));\\n        if (price == 0) revert PriceZero();\\n        listings[listingId] = SimpleListing({\\n            paymentToken: paymentToken,\\n            price: price\\n        });\\n        emit SimpleListingCreated(listingId, creator, paymentToken, price);\\n        return true;\\n    }\\n\\n    // Exposed entrypoints for dynamic dispatch; guarded so they can only be invoked via handleAction\\n    function buy(\\n        uint256 listingId,\\n        address creator,\\n        bool active,\\n        address buyer,\\n        bytes calldata /*data*/\\n    ) external payable onlySelf isActive(active) {\\n        SimpleListing storage l = listings[listingId];\\n        Marketplace(marketplace).setActive(listingId, false);\\n        if (l.paymentToken == address(0)) {\\n            if (msg.value != l.price) revert IncorrectEth();\\n            (bool sent, ) = creator.call{ value: msg.value }(\\\"\\\");\\n            if (!sent) revert EthSendFailed();\\n        } else {\\n            if (msg.value != 0) revert NoEthWithErc20();\\n            bool ok = IERC20(l.paymentToken).transferFrom(buyer, creator, l.price);\\n            if (!ok) revert Erc20TransferFailed();\\n        }\\n        emit SimpleListingSold(listingId, buyer, l.price, l.paymentToken);\\n    }\\n\\n    function close(\\n        uint256 listingId,\\n        address creator,\\n        bool active,\\n        address caller,\\n        bytes calldata /*data*/\\n    ) external onlySelf isActive(active) {\\n        if (creator != caller) revert NotCreator();\\n        Marketplace(marketplace).setActive(listingId, false);\\n        emit SimpleListingClosed(listingId, caller);\\n    }\\n\\n    function handleAction(\\n        uint256 listingId,\\n        address creator,\\n        bool active,\\n        address caller,\\n        bytes32 action,\\n        bytes calldata data\\n    ) external payable onlyMarketplace {\\n        // dynamic dispatch to self with the provided selector; functions are protected by onlySelf\\n        bytes4 selector = bytes4(action);\\n        (bool ok, bytes memory reason) = address(this).call{ value: msg.value }(\\n            abi.encodeWithSelector(selector, listingId, creator, active, caller, data)\\n        );\\n        if (!ok) {\\n            if (reason.length > 0) {\\n                assembly {\\n                    revert(add(reason, 0x20), mload(reason))\\n                }\\n            }\\n            revert UnknownAction();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf385d404e0e74d7546e14d19f2cd94777e4d8c102585d89fa1737cf19c306d8d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610c4c380380610c4c83398101604081905261002f91610067565b6001600160a01b038116610056576040516328d01a9d60e01b815260040160405180910390fd5b6001600160a01b0316608052610097565b60006020828403121561007957600080fd5b81516001600160a01b038116811461009057600080fd5b9392505050565b608051610b7e6100ce6000396000818161016201528181610287015281816104c6015281816105fe015261078e0152610b7e6000f3fe6080604052600436106100705760003560e01c8063696c9c0a1161004e578063696c9c0a14610120578063abc8c7af14610150578063af9d40b01461019c578063de74e57b146101bc57600080fd5b80630a0b927414610075578063107a274a1461008a5780634e4cfe271461010d575b600080fd5b6100886100833660046108a0565b61021b565b005b34801561009657600080fd5b506100f76100a5366004610925565b600090815260208181526040918290208251808401845281546001600160a01b031680825260019092015490830181905283519283019190915281830152815180820383018152606090910190915290565b6040516101049190610962565b60405180910390f35b61008861011b366004610995565b6104bb565b34801561012c57600080fd5b5061014061013b366004610a24565b6105f1565b6040519015158152602001610104565b34801561015c57600080fd5b506101847f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610104565b3480156101a857600080fd5b506100886101b73660046108a0565b610700565b3480156101c857600080fd5b506101fc6101d7366004610925565b600060208190529081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610104565b33301461023b576040516314e1dbf760e11b815260040160405180910390fd5b838061025a57604051634065aaf160e11b815260040160405180910390fd5b600087815260208190526040808220905163e60a955d60e01b8152600481018a90526024810192909252907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e60a955d90604401600060405180830381600087803b1580156102d357600080fd5b505af11580156102e7573d6000803e3d6000fd5b505082546001600160a01b0316915061039a90505780600101543414610320576040516354dc82ef60e01b815260040160405180910390fd5b6000876001600160a01b03163460405160006040518083038185875af1925050503d806000811461036d576040519150601f19603f3d011682016040523d82523d6000602084013e610372565b606091505b505090508061039457604051632609239960e21b815260040160405180910390fd5b50610462565b34156103b857604051623b2d9d60e41b815260040160405180910390fd5b805460018201546040516323b872dd60e01b81526001600160a01b0388811660048301528a81166024830152604482019290925260009291909116906323b872dd906064016020604051808303816000875af115801561041c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104409190610a80565b90508061046057604051637c38dad560e11b815260040160405180910390fd5b505b60018101548154604080519283526001600160a01b039182166020840152908716918a917fe4d654b74430663bf02fab3635281ee523d5408952c187466a2d4a00ec23f16d910160405180910390a35050505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105045760405163386317a360e01b815260040160405180910390fd5b6000839050600080306001600160a01b031634848c8c8c8c8b8b60405160240161053396959493929190610aa4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516105719190610b00565b60006040518083038185875af1925050503d80600081146105ae576040519150601f19603f3d011682016040523d82523d6000602084013e6105b3565b606091505b5091509150816105e5578051156105cc57805160208201fd5b60405163211bf9ef60e21b815260040160405180910390fd5b50505050505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461063c5760405163386317a360e01b815260040160405180910390fd5b60008061064b84860186610b1c565b915091508060000361067057604051637294708f60e11b815260040160405180910390fd5b6040805180820182526001600160a01b03848116808352602080840186815260008c8152808352869020945185546001600160a01b03191690851617855551600190940193909355835190815291820184905289169188917ff14ca227abc05ef399dc41cebb3c87ab947f2695c82f639dfc6309263379e2e2910160405180910390a35060019695505050505050565b333014610720576040516314e1dbf760e11b815260040160405180910390fd5b838061073f57604051634065aaf160e11b815260040160405180910390fd5b836001600160a01b0316866001600160a01b031614610771576040516393687c0b60e01b815260040160405180910390fd5b60405163e60a955d60e01b815260048101889052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e60a955d90604401600060405180830381600087803b1580156107da57600080fd5b505af11580156107ee573d6000803e3d6000fd5b50506040516001600160a01b03871692508991507f06ad22b56747df09cc0aadf7a34eb5fc96c418282980329a0bd8e56d504d673790600090a350505050505050565b6001600160a01b038116811461084657600080fd5b50565b801515811461084657600080fd5b60008083601f84011261086957600080fd5b50813567ffffffffffffffff81111561088157600080fd5b60208301915083602082850101111561089957600080fd5b9250929050565b60008060008060008060a087890312156108b957600080fd5b8635955060208701356108cb81610831565b945060408701356108db81610849565b935060608701356108eb81610831565b9250608087013567ffffffffffffffff81111561090757600080fd5b61091389828a01610857565b979a9699509497509295939492505050565b60006020828403121561093757600080fd5b5035919050565b60005b83811015610959578181015183820152602001610941565b50506000910152565b602081526000825180602084015261098181604085016020870161093e565b601f01601f19169190910160400192915050565b600080600080600080600060c0888a0312156109b057600080fd5b8735965060208801356109c281610831565b955060408801356109d281610849565b945060608801356109e281610831565b93506080880135925060a088013567ffffffffffffffff811115610a0557600080fd5b610a118a828b01610857565b989b979a50959850939692959293505050565b60008060008060608587031215610a3a57600080fd5b8435610a4581610831565b935060208501359250604085013567ffffffffffffffff811115610a6857600080fd5b610a7487828801610857565b95989497509550505050565b600060208284031215610a9257600080fd5b8151610a9d81610849565b9392505050565b8681526001600160a01b03868116602083015285151560408301528416606082015260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b60008251610b1281846020870161093e565b9190910192915050565b60008060408385031215610b2f57600080fd5b8235610b3a81610831565b94602093909301359350505056fea2646970667358221220f16604716a5f738708acf9414a0c0ed29cc304409923c5abd0d0b8222406de5964736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063696c9c0a1161004e578063696c9c0a14610120578063abc8c7af14610150578063af9d40b01461019c578063de74e57b146101bc57600080fd5b80630a0b927414610075578063107a274a1461008a5780634e4cfe271461010d575b600080fd5b6100886100833660046108a0565b61021b565b005b34801561009657600080fd5b506100f76100a5366004610925565b600090815260208181526040918290208251808401845281546001600160a01b031680825260019092015490830181905283519283019190915281830152815180820383018152606090910190915290565b6040516101049190610962565b60405180910390f35b61008861011b366004610995565b6104bb565b34801561012c57600080fd5b5061014061013b366004610a24565b6105f1565b6040519015158152602001610104565b34801561015c57600080fd5b506101847f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610104565b3480156101a857600080fd5b506100886101b73660046108a0565b610700565b3480156101c857600080fd5b506101fc6101d7366004610925565b600060208190529081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610104565b33301461023b576040516314e1dbf760e11b815260040160405180910390fd5b838061025a57604051634065aaf160e11b815260040160405180910390fd5b600087815260208190526040808220905163e60a955d60e01b8152600481018a90526024810192909252907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e60a955d90604401600060405180830381600087803b1580156102d357600080fd5b505af11580156102e7573d6000803e3d6000fd5b505082546001600160a01b0316915061039a90505780600101543414610320576040516354dc82ef60e01b815260040160405180910390fd5b6000876001600160a01b03163460405160006040518083038185875af1925050503d806000811461036d576040519150601f19603f3d011682016040523d82523d6000602084013e610372565b606091505b505090508061039457604051632609239960e21b815260040160405180910390fd5b50610462565b34156103b857604051623b2d9d60e41b815260040160405180910390fd5b805460018201546040516323b872dd60e01b81526001600160a01b0388811660048301528a81166024830152604482019290925260009291909116906323b872dd906064016020604051808303816000875af115801561041c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104409190610a80565b90508061046057604051637c38dad560e11b815260040160405180910390fd5b505b60018101548154604080519283526001600160a01b039182166020840152908716918a917fe4d654b74430663bf02fab3635281ee523d5408952c187466a2d4a00ec23f16d910160405180910390a35050505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105045760405163386317a360e01b815260040160405180910390fd5b6000839050600080306001600160a01b031634848c8c8c8c8b8b60405160240161053396959493929190610aa4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516105719190610b00565b60006040518083038185875af1925050503d80600081146105ae576040519150601f19603f3d011682016040523d82523d6000602084013e6105b3565b606091505b5091509150816105e5578051156105cc57805160208201fd5b60405163211bf9ef60e21b815260040160405180910390fd5b50505050505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461063c5760405163386317a360e01b815260040160405180910390fd5b60008061064b84860186610b1c565b915091508060000361067057604051637294708f60e11b815260040160405180910390fd5b6040805180820182526001600160a01b03848116808352602080840186815260008c8152808352869020945185546001600160a01b03191690851617855551600190940193909355835190815291820184905289169188917ff14ca227abc05ef399dc41cebb3c87ab947f2695c82f639dfc6309263379e2e2910160405180910390a35060019695505050505050565b333014610720576040516314e1dbf760e11b815260040160405180910390fd5b838061073f57604051634065aaf160e11b815260040160405180910390fd5b836001600160a01b0316866001600160a01b031614610771576040516393687c0b60e01b815260040160405180910390fd5b60405163e60a955d60e01b815260048101889052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e60a955d90604401600060405180830381600087803b1580156107da57600080fd5b505af11580156107ee573d6000803e3d6000fd5b50506040516001600160a01b03871692508991507f06ad22b56747df09cc0aadf7a34eb5fc96c418282980329a0bd8e56d504d673790600090a350505050505050565b6001600160a01b038116811461084657600080fd5b50565b801515811461084657600080fd5b60008083601f84011261086957600080fd5b50813567ffffffffffffffff81111561088157600080fd5b60208301915083602082850101111561089957600080fd5b9250929050565b60008060008060008060a087890312156108b957600080fd5b8635955060208701356108cb81610831565b945060408701356108db81610849565b935060608701356108eb81610831565b9250608087013567ffffffffffffffff81111561090757600080fd5b61091389828a01610857565b979a9699509497509295939492505050565b60006020828403121561093757600080fd5b5035919050565b60005b83811015610959578181015183820152602001610941565b50506000910152565b602081526000825180602084015261098181604085016020870161093e565b601f01601f19169190910160400192915050565b600080600080600080600060c0888a0312156109b057600080fd5b8735965060208801356109c281610831565b955060408801356109d281610849565b945060608801356109e281610831565b93506080880135925060a088013567ffffffffffffffff811115610a0557600080fd5b610a118a828b01610857565b989b979a50959850939692959293505050565b60008060008060608587031215610a3a57600080fd5b8435610a4581610831565b935060208501359250604085013567ffffffffffffffff811115610a6857600080fd5b610a7487828801610857565b95989497509550505050565b600060208284031215610a9257600080fd5b8151610a9d81610849565b9392505050565b8681526001600160a01b03868116602083015285151560408301528416606082015260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b60008251610b1281846020870161093e565b9190910192915050565b60008060408385031215610b2f57600080fd5b8235610b3a81610831565b94602093909301359350505056fea2646970667358221220f16604716a5f738708acf9414a0c0ed29cc304409923c5abd0d0b8222406de5964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(address,uint256,bytes)": {
        "details": "All listings start at this step",
        "params": {
          "creator": "The creator of the listing",
          "data": "The data for the listing",
          "listingId": "The ID of the listing"
        }
      },
      "getListing(uint256)": {
        "details": "The data is the encoded data for the listing"
      },
      "handleAction(uint256,address,bool,address,bytes32,bytes)": {
        "details": "The caller must be the marketplace contract",
        "params": {
          "action": "The action to handle",
          "active": "Whether the listing is active",
          "caller": "The caller of the action",
          "creator": "The creator of the listing",
          "data": "The data for the action",
          "listingId": "The ID of the listing"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "create(address,uint256,bytes)": {
        "notice": "Creates a new listing"
      },
      "getListing(uint256)": {
        "notice": "Returns the data for a listing"
      },
      "handleAction(uint256,address,bool,address,bytes32,bytes)": {
        "notice": "Handles an action for a listing"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 493,
        "contract": "contracts/SimpleListings.sol:SimpleListings",
        "label": "listings",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(SimpleListing)486_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(SimpleListing)486_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SimpleListings.SimpleListing)",
        "numberOfBytes": "32",
        "value": "t_struct(SimpleListing)486_storage"
      },
      "t_struct(SimpleListing)486_storage": {
        "encoding": "inplace",
        "label": "struct SimpleListings.SimpleListing",
        "members": [
          {
            "astId": 483,
            "contract": "contracts/SimpleListings.sol:SimpleListings",
            "label": "paymentToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 485,
            "contract": "contracts/SimpleListings.sol:SimpleListings",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}